// üìÅ src/hooks/useCropTimer.ts
import { useEffect, useRef } from 'react';
import { TileState } from '../types/farm';
import { CROP_LIST } from '../constants/crops';

interface UseCropTimerProps {
  user: any;
  isLoading: boolean;
  tiles: TileState[];
  setTiles: React.Dispatch<React.SetStateAction<TileState[]>>;
  setInventory: React.Dispatch<React.SetStateAction<Record<string, number>>>;
  optimizedSave: (priority: 'immediate' | 'batch' | 'smart', reason: string) => void;
}

export const useCropTimer = ({ 
  user, 
  isLoading, 
  tiles, 
  setTiles, 
  setInventory, 
  optimizedSave 
}: UseCropTimerProps) => {
  const intervalRef = useRef<NodeJS.Timeout | null>(null);
  const isRunningRef = useRef(false);
  const lastAutoSaveTime = useRef<number>(0);
  const accumulatedHarvests = useRef<number>(0); // ÎàÑÏ†Å ÏàòÌôï Ïπ¥Ïö¥ÌÑ∞ (Firebase ÏµúÏ†ÅÌôîÏö©)
  
  // ÏµúÏã† ÏÉÅÌÉúÍ∞íÏùÑ Ï∞∏Ï°∞ÌïòÍ∏∞ ÏúÑÌïú refÎì§ - Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
  const tilesRef = useRef(tiles);
  const setTilesRef = useRef(setTiles);
  const setInventoryRef = useRef(setInventory);
  const optimizedSaveRef = useRef(optimizedSave);
  
  // ref Í∞íÎì§ÏùÑ ÏµúÏã† ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ - Îã®Ïùº useEffectÎ°ú ÌÜµÌï©ÌïòÏó¨ ÏµúÏ†ÅÌôî
  useEffect(() => {
    tilesRef.current = tiles;
    setTilesRef.current = setTiles;
    setInventoryRef.current = setInventory;
    optimizedSaveRef.current = optimizedSave;
  }); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ ÏóÜÏù¥ Îß§ Î†åÎçîÎßÅÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎêò, ÌÉÄÏù¥Î®∏Îäî ÏòÅÌñ•Î∞õÏßÄ ÏïäÏùå

  // ÏïàÏ†ïÏ†ÅÏù∏ ÌÉÄÏù¥Î®∏ ÏΩúÎ∞± Ìï®Ïàò - Ìï®Ïàò ÎÇ¥Î∂ÄÏóêÏÑú ÏßÅÏ†ë Ï†ïÏùòÌïòÏó¨ ÏùòÏ°¥ÏÑ± Ï†úÍ±∞
  const timerCallback = () => {
    // ÌÉÄÏù¥Î®∏ ÏÉÅÌÉú Í≤ÄÏ¶ù
    if (!isRunningRef.current) {
      console.warn('‚ö†Ô∏è ÌÉÄÏù¥Î®∏Í∞Ä Ï§ëÏßÄ ÏÉÅÌÉúÏù∏Îç∞ ÏΩúÎ∞±Ïù¥ Ïã§ÌñâÎê®');
      return;
    }
    
    setTilesRef.current(currentTiles => {
      let hasChanges = false;
      let autoHarvestCount = 0;
      
      const updatedTiles = currentTiles.map(tile => {
        if (tile.type === 'crop' && tile.remainingTime !== undefined && tile.remainingTime > 0) {
          const newRemainingTime = Math.max(0, tile.remainingTime - 1);
          const wasNotReady = !tile.isReady;
          const isNowReady = newRemainingTime <= 0; // 0Ï¥àÍ∞Ä ÎêòÏñ¥Ïïº ÏàòÌôï
          
          if (wasNotReady && isNowReady) {
            // ÏûêÎèô ÏàòÌôï Î∞è Ïû¨Ïã¨Í∏∞
            const cropInfo = CROP_LIST.find(c => c.name === tile.cropName);
            if (cropInfo) {
              setInventoryRef.current(prev => ({
                ...prev,
                [tile.cropName!]: (prev[tile.cropName!] || 0) + 1
              }));
              autoHarvestCount++;
              hasChanges = true;
              
              // Ï¶âÏãú Ïû¨Ïã¨Í∏∞
              return {
                ...tile,
                remainingTime: cropInfo.growTime,
                isReady: false
              };
            }
          }
          
          return {
            ...tile,
            remainingTime: newRemainingTime,
            isReady: isNowReady
          };
        }
        return tile;
      });
      
      // Firebase ÏµúÏ†ÅÌôî: ÎàÑÏ†Å ÏàòÌôï ÏãúÏä§ÌÖú
      if (hasChanges && autoHarvestCount > 0) {
        accumulatedHarvests.current += autoHarvestCount;
        const now = Date.now();
        const timeSinceLastSave = now - lastAutoSaveTime.current;
        
        // Ï°∞Í±¥Î∂Ä Ï†ÄÏû•: 60Ï¥à Í≤ΩÍ≥º OR ÎàÑÏ†Å ÏàòÌôï 50Í∞ú Ïù¥ÏÉÅ
        const shouldSave = timeSinceLastSave > 60000 || accumulatedHarvests.current >= 50;
        
        if (shouldSave) {
          console.log(`üåæ Firebase ÏµúÏ†ÅÌôî Ï†ÄÏû•: ÎàÑÏ†Å ${accumulatedHarvests.current}Í∞ú ÏàòÌôï`);
          optimizedSaveRef.current('smart', `ÎàÑÏ†Å ÏàòÌôï ${accumulatedHarvests.current}Í∞ú`);
          lastAutoSaveTime.current = now;
          accumulatedHarvests.current = 0; // Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
        } else {
          const remainingTime = Math.round((60000 - timeSinceLastSave) / 1000);
          const remainingCount = 50 - accumulatedHarvests.current;
          console.log(`üåæ ÏàòÌôï ÎàÑÏ†Å Ï§ë: ${accumulatedHarvests.current}/50Í∞ú (${remainingTime}Ï¥à ÎòêÎäî ${remainingCount}Í∞ú Îçî ÌïÑÏöî)`);
        }
      }
      
      return updatedTiles;
    });
  };

  useEffect(() => {
    // ÌÉÄÏù¥Î®∏ ÏãúÏûë Ï°∞Í±¥ Ï≤¥ÌÅ¨
    const shouldRunTimer = user && !isLoading;
    
    if (!shouldRunTimer) {
      console.log('‚è∏Ô∏è ÏûëÎ¨º ÌÉÄÏù¥Î®∏ Ï§ëÏßÄ:', !user ? 'ÏÇ¨Ïö©Ïûê ÏóÜÏùå' : 'Î°úÎî© Ï§ë');
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
        isRunningRef.current = false;
      }
      return;
    }
    
    // Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ëÏù¥Î©¥ Ï§ëÎ≥µ Ïã§Ìñâ Î∞©ÏßÄ (ÌÉÄÏù¥Î®∏ ÏïàÏ†ïÏÑ± Î≥¥Ïû•)
    if (isRunningRef.current && intervalRef.current) {
      console.log('‚úÖ ÏûëÎ¨º ÌÉÄÏù¥Î®∏ Ïù¥ÎØ∏ ÏïàÏ†ïÏ†ÅÏúºÎ°ú Ïã§Ìñâ Ï§ë');
      return;
    }
    
    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏Í∞Ä ÏûàÎã§Î©¥ Ï†ïÎ¶¨ (ÏïàÏ†ÑÏû•Ïπò)
    if (intervalRef.current) {
      console.log('üîÑ Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨ ÌõÑ Ïû¨ÏãúÏûë');
      clearInterval(intervalRef.current);
    }
    
    console.log('‚ñ∂Ô∏è ÏûëÎ¨º ÌÉÄÏù¥Î®∏ ÏãúÏûë (ÏïàÏ†ï Î™®Îìú)');
    isRunningRef.current = true;
    
    intervalRef.current = setInterval(timerCallback, 1000);

    return () => {
      console.log('‚èπÔ∏è ÏûëÎ¨º ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨');
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
      isRunningRef.current = false;
    };
  }, [user?.uid, isLoading]); // ÏÇ¨Ïö©ÏûêÏôÄ Î°úÎî© ÏÉÅÌÉúÎßå Í∞êÏßÄÌïòÏó¨ ÏµúÎåÄÌïú ÏïàÏ†ïÌôî

  // ÌéòÏù¥ÏßÄ Í∞ïÏ†úÏ¢ÖÎ£å Ïãú Ï†ÄÏû• (beforeunload Ïù¥Î≤§Ìä∏)
  useEffect(() => {
    if (!user) return;

    const handleBeforeUnload = (event: BeforeUnloadEvent) => {
      console.log(`üö® ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Í∞êÏßÄ - Í∏¥Í∏â Ï†ÄÏû• (ÎàÑÏ†Å ÏàòÌôï: ${accumulatedHarvests.current}Í∞ú)`);
      
      // Ï¶âÏãú Ï†ÄÏû• (ÎèôÍ∏∞Ïãù)
      try {
        optimizedSaveRef.current('immediate', `ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ï†ÄÏû• (ÎàÑÏ†Å: ${accumulatedHarvests.current}Í∞ú)`);
        accumulatedHarvests.current = 0; // Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
        console.log('‚úÖ ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ï†ÄÏû• ÏôÑÎ£å');
      } catch (error) {
        console.error('‚ùå ÌéòÏù¥ÏßÄ Ï¢ÖÎ£å Ï†ÄÏû• Ïã§Ìå®:', error);
      }
      
      // Î∏åÎùºÏö∞Ï†ÄÏóêÍ≤å Ï†ÄÏû• Ï§ëÏûÑÏùÑ ÏïåÎ¶º (ÏÑ†ÌÉùÏÇ¨Ìï≠)
      event.preventDefault();
      event.returnValue = 'Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû• Ï§ëÏûÖÎãàÎã§...';
      return 'Í≤åÏûÑ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÄÏû• Ï§ëÏûÖÎãàÎã§...';
    };

    const handleVisibilityChange = () => {
      if (document.hidden && accumulatedHarvests.current > 0) {
        console.log(`üîí ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Í∞êÏßÄ - ÎàÑÏ†Å Ï†ÄÏû• (${accumulatedHarvests.current}Í∞ú)`);
        optimizedSaveRef.current('batch', `ÌéòÏù¥ÏßÄ Ïà®ÍπÄ Ï†ÄÏû• (ÎàÑÏ†Å: ${accumulatedHarvests.current}Í∞ú)`);
        accumulatedHarvests.current = 0; // Ïπ¥Ïö¥ÌÑ∞ Î¶¨ÏÖã
      }
    };

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù
    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†ïÎ¶¨
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [user?.uid]);
};
